// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: customer/v1/book_service.proto

package customerv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/0utl1er-tech/phox-customer/gen/pb/customer/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookServiceName is the fully-qualified name of the BookService service.
	BookServiceName = "customer.v1.BookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookServiceGetBooksByUserIDProcedure is the fully-qualified name of the BookService's
	// GetBooksByUserID RPC.
	BookServiceGetBooksByUserIDProcedure = "/customer.v1.BookService/GetBooksByUserID"
	// BookServiceGetBookByIDProcedure is the fully-qualified name of the BookService's GetBookByID RPC.
	BookServiceGetBookByIDProcedure = "/customer.v1.BookService/GetBookByID"
	// BookServiceCreateBookProcedure is the fully-qualified name of the BookService's CreateBook RPC.
	BookServiceCreateBookProcedure = "/customer.v1.BookService/CreateBook"
)

// BookServiceClient is a client for the customer.v1.BookService service.
type BookServiceClient interface {
	// GetBooksByUserID ユーザーがアクセス可能なbook一覧を取得
	GetBooksByUserID(context.Context, *connect_go.Request[v1.GetBooksByUserIDRequest]) (*connect_go.Response[v1.GetBooksByUserIDResponse], error)
	// GetBookByID 特定のbookを取得（ユーザーがアクセス可能な場合のみ）
	GetBookByID(context.Context, *connect_go.Request[v1.GetBookByIDRequest]) (*connect_go.Response[v1.GetBookByIDResponse], error)
	// CreateBook 新しいbookを作成
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error)
}

// NewBookServiceClient constructs a client for the customer.v1.BookService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookServiceClient{
		getBooksByUserID: connect_go.NewClient[v1.GetBooksByUserIDRequest, v1.GetBooksByUserIDResponse](
			httpClient,
			baseURL+BookServiceGetBooksByUserIDProcedure,
			opts...,
		),
		getBookByID: connect_go.NewClient[v1.GetBookByIDRequest, v1.GetBookByIDResponse](
			httpClient,
			baseURL+BookServiceGetBookByIDProcedure,
			opts...,
		),
		createBook: connect_go.NewClient[v1.CreateBookRequest, v1.CreateBookResponse](
			httpClient,
			baseURL+BookServiceCreateBookProcedure,
			opts...,
		),
	}
}

// bookServiceClient implements BookServiceClient.
type bookServiceClient struct {
	getBooksByUserID *connect_go.Client[v1.GetBooksByUserIDRequest, v1.GetBooksByUserIDResponse]
	getBookByID      *connect_go.Client[v1.GetBookByIDRequest, v1.GetBookByIDResponse]
	createBook       *connect_go.Client[v1.CreateBookRequest, v1.CreateBookResponse]
}

// GetBooksByUserID calls customer.v1.BookService.GetBooksByUserID.
func (c *bookServiceClient) GetBooksByUserID(ctx context.Context, req *connect_go.Request[v1.GetBooksByUserIDRequest]) (*connect_go.Response[v1.GetBooksByUserIDResponse], error) {
	return c.getBooksByUserID.CallUnary(ctx, req)
}

// GetBookByID calls customer.v1.BookService.GetBookByID.
func (c *bookServiceClient) GetBookByID(ctx context.Context, req *connect_go.Request[v1.GetBookByIDRequest]) (*connect_go.Response[v1.GetBookByIDResponse], error) {
	return c.getBookByID.CallUnary(ctx, req)
}

// CreateBook calls customer.v1.BookService.CreateBook.
func (c *bookServiceClient) CreateBook(ctx context.Context, req *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error) {
	return c.createBook.CallUnary(ctx, req)
}

// BookServiceHandler is an implementation of the customer.v1.BookService service.
type BookServiceHandler interface {
	// GetBooksByUserID ユーザーがアクセス可能なbook一覧を取得
	GetBooksByUserID(context.Context, *connect_go.Request[v1.GetBooksByUserIDRequest]) (*connect_go.Response[v1.GetBooksByUserIDResponse], error)
	// GetBookByID 特定のbookを取得（ユーザーがアクセス可能な場合のみ）
	GetBookByID(context.Context, *connect_go.Request[v1.GetBookByIDRequest]) (*connect_go.Response[v1.GetBookByIDResponse], error)
	// CreateBook 新しいbookを作成
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error)
}

// NewBookServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookServiceHandler(svc BookServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bookServiceGetBooksByUserIDHandler := connect_go.NewUnaryHandler(
		BookServiceGetBooksByUserIDProcedure,
		svc.GetBooksByUserID,
		opts...,
	)
	bookServiceGetBookByIDHandler := connect_go.NewUnaryHandler(
		BookServiceGetBookByIDProcedure,
		svc.GetBookByID,
		opts...,
	)
	bookServiceCreateBookHandler := connect_go.NewUnaryHandler(
		BookServiceCreateBookProcedure,
		svc.CreateBook,
		opts...,
	)
	return "/customer.v1.BookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookServiceGetBooksByUserIDProcedure:
			bookServiceGetBooksByUserIDHandler.ServeHTTP(w, r)
		case BookServiceGetBookByIDProcedure:
			bookServiceGetBookByIDHandler.ServeHTTP(w, r)
		case BookServiceCreateBookProcedure:
			bookServiceCreateBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookServiceHandler struct{}

func (UnimplementedBookServiceHandler) GetBooksByUserID(context.Context, *connect_go.Request[v1.GetBooksByUserIDRequest]) (*connect_go.Response[v1.GetBooksByUserIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("customer.v1.BookService.GetBooksByUserID is not implemented"))
}

func (UnimplementedBookServiceHandler) GetBookByID(context.Context, *connect_go.Request[v1.GetBookByIDRequest]) (*connect_go.Response[v1.GetBookByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("customer.v1.BookService.GetBookByID is not implemented"))
}

func (UnimplementedBookServiceHandler) CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("customer.v1.BookService.CreateBook is not implemented"))
}
