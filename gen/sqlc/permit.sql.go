// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permit.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserAccessToBook = `-- name: CheckUserAccessToBook :one
SELECT EXISTS(
    SELECT 1 FROM "Permit" 
    WHERE book_id = $1 AND user_id = $2
) as has_access
`

type CheckUserAccessToBookParams struct {
	BookID uuid.UUID `json:"book_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckUserAccessToBook(ctx context.Context, arg CheckUserAccessToBookParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserAccessToBook, arg.BookID, arg.UserID)
	var has_access bool
	err := row.Scan(&has_access)
	return has_access, err
}

const checkUserRoleForBook = `-- name: CheckUserRoleForBook :one
SELECT role FROM "Permit" 
WHERE book_id = $1 AND user_id = $2
`

type CheckUserRoleForBookParams struct {
	BookID uuid.UUID `json:"book_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckUserRoleForBook(ctx context.Context, arg CheckUserRoleForBookParams) (Role, error) {
	row := q.db.QueryRow(ctx, checkUserRoleForBook, arg.BookID, arg.UserID)
	var role Role
	err := row.Scan(&role)
	return role, err
}

const createPermit = `-- name: CreatePermit :exec
INSERT INTO "Permit" (
    id, book_id, role, user_id
) VALUES (
    $1, $2, $3, $4
)
`

type CreatePermitParams struct {
	ID     uuid.UUID `json:"id"`
	BookID uuid.UUID `json:"book_id"`
	Role   Role      `json:"role"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreatePermit(ctx context.Context, arg CreatePermitParams) error {
	_, err := q.db.Exec(ctx, createPermit,
		arg.ID,
		arg.BookID,
		arg.Role,
		arg.UserID,
	)
	return err
}

const deletePermit = `-- name: DeletePermit :exec
DELETE FROM "Permit" WHERE id = $1
`

func (q *Queries) DeletePermit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePermit, id)
	return err
}

const getPermit = `-- name: GetPermit :one
SELECT id, book_id, user_id, role, created_at FROM "Permit" 
WHERE id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPermit(ctx context.Context, id uuid.UUID) (Permit, error) {
	row := q.db.QueryRow(ctx, getPermit, id)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getPermitByBookIDAndUserID = `-- name: GetPermitByBookIDAndUserID :one
SELECT id, book_id, user_id, role, created_at FROM "Permit" 
WHERE book_id = $1 AND user_id = $2
`

type GetPermitByBookIDAndUserIDParams struct {
	BookID uuid.UUID `json:"book_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetPermitByBookIDAndUserID(ctx context.Context, arg GetPermitByBookIDAndUserIDParams) (Permit, error) {
	row := q.db.QueryRow(ctx, getPermitByBookIDAndUserID, arg.BookID, arg.UserID)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getPermitsByUserID = `-- name: GetPermitsByUserID :many
SELECT id, book_id, user_id, role, created_at FROM "Permit" 
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPermitsByUserID(ctx context.Context, userID uuid.UUID) ([]Permit, error) {
	rows, err := q.db.Query(ctx, getPermitsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permit{}
	for rows.Next() {
		var i Permit
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermit = `-- name: UpdatePermit :one
UPDATE "Permit" 
SET 
  role = COALESCE($1, role),
  user_id = COALESCE($2, user_id)
WHERE id = $3
RETURNING id, book_id, user_id, role, created_at
`

type UpdatePermitParams struct {
	Role   NullRole    `json:"role"`
	UserID pgtype.UUID `json:"user_id"`
	ID     uuid.UUID   `json:"id"`
}

func (q *Queries) UpdatePermit(ctx context.Context, arg UpdatePermitParams) (Permit, error) {
	row := q.db.QueryRow(ctx, updatePermit, arg.Role, arg.UserID, arg.ID)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
